using HtcSharp.Core.Helpers.Http;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Text;

namespace HtcSharp.Core.Models.Http.Pages {
    public static class Default4xx {

        public static void Call404(HtcHttpContext context) {
            if (context.Response.HasStarted) return;
            const string page = "<!DOCTYPE html><html><head> <style>*{margin: 0px auto; padding: 0px; text-align: center;}body{background-color: rgb(179, 210, 230);}.cont_principal{position: absolute; width: 100%; height: 100%; overflow: hidden;}.cont_error{position: absolute; width: 100%; height: 300px; top: 50%; margin-top: -150px;}.cont_error>h1{font-family: 'Lato', sans-serif; font-weight: 400; font-size: 150px; color: #fff; position: relative; left: -100%; transition: all 0.5s;}.cont_error>p{font-family: 'Lato', sans-serif; font-weight: 300; font-size: 24px; letter-spacing: 5px; color: rgb(109, 124, 138); position: relative; left: 100%; transition: all 0.5s; transition-delay: 0.5s; -webkit-transition: all 0.5s; -webkit-transition-delay: 0.5s;}.cont_error>p>small{font-family: 'Lato', sans-serif; font-weight: 500; font-size: 15px; letter-spacing: 1px;}.cont_aura_1{position: absolute; width: 300px; height: 120%; top: 25px; right: -340px; background-color: rgb(11, 85, 180); box-shadow: 0px 0px 60px 10px rgba(9, 70, 150, 0.5), 0px 0px 20px 0px rgba(0, 0, 0, 0.1); -webkit-transition: all 0.5s; transition: all 0.5s;}.cont_aura_2{position: absolute; width: 100%; height: 300px; right: -10%; bottom: -301px; background-color: rgb(13, 97, 192); box-shadow: 0px 0px 60px 10px rgba(11, 75, 170, 0.5), 0px 0px 20px 0px rgba(0, 0, 0, 0.1); z-index: 5; transition: all 0.5s; -webkit-transition: all 0.5s;}.cont_error_active>.cont_error>h1{left: 0%;}.cont_error_active>.cont_error>p{left: 0%;}.cont_error_active>.cont_aura_2{animation-name: animation_error_2; animation-duration: 4s; animation-timing-function: linear; animation-iteration-count: infinite; animation-direction: alternate; transform: rotate(-20deg);}.cont_error_active>.cont_aura_1{transform: rotate(20deg); right: -170px; animation-name: animation_error_1; animation-duration: 4s; animation-timing-function: linear; animation-iteration-count: infinite; animation-direction: alternate;}@-webkit-keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@-o-keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@-moz-keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@-webkit-keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}@-o-keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}}@-moz-keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}@keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}</style></head><body> <div class=\"cont_principal\"> <div class=\"cont_error\"> <h1>404</h1> <p>Resource not found<br><small>%REQUESTURL%</small></p></div><div class=\"cont_aura_1\"></div><div class=\"cont_aura_2\"></div></div><script>window.onload=function (){document.querySelector('.cont_principal').className=\"cont_principal cont_error_active\";}</script></body></html>";
            context.Response.ContentType = ContentType.HTML.ToValue();
            context.Response.StatusCode = 404;
            context.Response.WriteAsync(page.Replace("%REQUESTURL%", context.Request.Path.ToString())).GetAwaiter().GetResult();
        }

        public static void Call403(HtcHttpContext context) {
            if (context.Response.HasStarted) return;
            const string page = "<!DOCTYPE html><html><head> <style>*{margin: 0px auto; padding: 0px; text-align: center;}body{background-color: rgb(230, 179, 179);}.cont_principal{position: absolute; width: 100%; height: 100%; overflow: hidden;}.cont_error{position: absolute; width: 100%; height: 300px; top: 50%; margin-top: -150px;}.cont_error>h1{font-family: 'Lato', sans-serif; font-weight: 400; font-size: 150px; color: #fff; position: relative; left: -100%; transition: all 0.5s;}.cont_error>p{font-family: 'Lato', sans-serif; font-weight: 300; font-size: 24px; letter-spacing: 5px; color: rgb(138, 109, 109); position: relative; left: 100%; transition: all 0.5s; transition-delay: 0.5s; -webkit-transition: all 0.5s; -webkit-transition-delay: 0.5s;}.cont_error>p>small{font-family: 'Lato', sans-serif; font-weight: 500; font-size: 15px; letter-spacing: 1px;}.cont_aura_1{position: absolute; width: 300px; height: 120%; top: 25px; right: -340px; background-color: rgb(180, 11, 11); box-shadow: 0px 0px 60px 10px rgba(150, 9, 9, 0.5), 0px 0px 20px 0px rgba(0, 0, 0, 0.1); -webkit-transition: all 0.5s; transition: all 0.5s;}.cont_aura_2{position: absolute; width: 100%; height: 300px; right: -10%; bottom: -301px; background-color: rgb(192, 13, 13); box-shadow: 0px 0px 60px 10px rgba(170, 11, 11, 0.5), 0px 0px 20px 0px rgba(0, 0, 0, 0.1); z-index: 5; transition: all 0.5s; -webkit-transition: all 0.5s;}.cont_error_active>.cont_error>h1{left: 0%;}.cont_error_active>.cont_error>p{left: 0%;}.cont_error_active>.cont_aura_2{animation-name: animation_error_2; animation-duration: 4s; animation-timing-function: linear; animation-iteration-count: infinite; animation-direction: alternate; transform: rotate(-20deg);}.cont_error_active>.cont_aura_1{transform: rotate(20deg); right: -170px; animation-name: animation_error_1; animation-duration: 4s; animation-timing-function: linear; animation-iteration-count: infinite; animation-direction: alternate;}@-webkit-keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@-o-keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@-moz-keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@keyframes animation_error_1{from{-webkit-transform: rotate(20deg); transform: rotate(20deg);}to{-webkit-transform: rotate(25deg); transform: rotate(25deg);}}@-webkit-keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}@-o-keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}}@-moz-keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}@keyframes animation_error_2{from{-webkit-transform: rotate(-15deg); transform: rotate(-15deg);}to{-webkit-transform: rotate(-20deg); transform: rotate(-20deg);}}</style></head><body> <div class=\"cont_principal\"> <div class=\"cont_error\"> <h1>403</h1> <p>Forbidden<br><small>%REQUESTURL%</small></p></div><div class=\"cont_aura_1\"></div><div class=\"cont_aura_2\"></div></div><script>window.onload=function (){document.querySelector('.cont_principal').className=\"cont_principal cont_error_active\";}</script></body></html>";
            context.Response.ContentType = ContentType.HTML.ToValue();
            context.Response.StatusCode = 500;
            context.Response.WriteAsync(page.Replace("%REQUESTURL%", context.Request.Path.ToString())).GetAwaiter().GetResult();
        }

    }
}
